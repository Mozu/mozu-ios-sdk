
/*
* <auto-generated>
*     This code was generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

#import <Foundation/Foundation.h>
#import "JSONModel.h"
#import "MOZURuntimeDiscount.h"
#import "MOZURuntimeBundledProduct.h"
#import "MOZURuntimeCategory.h"
#import "MOZUProductContent.h"
#import "MOZURuntimeProductInventoryInfo.h"
#import "MOZURuntimePackageMeasurements.h"
#import "MOZURuntimeProductOption.h"
#import "MOZURuntimeProductPrice.h"
#import "MOZUProductPriceRange.h"
#import "MOZURuntimeProductPricingBehaviorInfo.h"
#import "MOZURuntimeProductProperty.h"
#import "MOZUProductPurchasableState.h"
#import "MOZUVariationSummary.h"



@protocol MOZURuntimeProduct
@end


/**
	The properties of a product, referenced and used by carts, orders, wish lists, and returns.
*/
@interface MOZURuntimeProduct : JSONModel<MOZURuntimeProduct>

/**
Mozu.ProductRuntime.Contracts.Product catalogEndDate ApiTypeMember DOCUMENT_HERE 
*/
@property(nonatomic) NSDate * catalogEndDate;

/**
Mozu.ProductRuntime.Contracts.Product catalogStartDate ApiTypeMember DOCUMENT_HERE 
*/
@property(nonatomic) NSDate * catalogStartDate;

/**
Date and time when the entity was created, represented in UTC Date/Time.
*/
@property(nonatomic) NSDate * createDate;

/**
Mozu.ProductRuntime.Contracts.Product dateFirstAvailableInCatalog ApiTypeMember DOCUMENT_HERE 
*/
@property(nonatomic) NSDate * dateFirstAvailableInCatalog;

/**
Mozu.ProductRuntime.Contracts.Product daysAvailableInCatalog ApiTypeMember DOCUMENT_HERE 
*/
@property(nonatomic) NSNumber * daysAvailableInCatalog;

/**
List of supported types of fulfillment  for the product or variation. The types include direct ship, in-store pickup, or both. 
*/
@property(nonatomic) NSArray *fulfillmentTypesSupported;

/**
The type of goods in a bundled product. A bundled product is composed of products associated to sell together. Possible values include “Physical” and “DigitalCredit”. This comes from the `productType `of the product. Products are defaulted to a Physical `goodsType`. Gift cards have a `goodsType `of DigitalCredit.
*/
@property(nonatomic) NSString * goodsType;

/**
Indicates if the object or feature is active. This indicator is used for subscriptions (at the site or tenant level), customer accounts, products and variations.
*/
@property(nonatomic) NSNumber * isActive;

/**
Indicates if the product must be shipped alone in a container. This is used for products and products within a bundle. If true, this product cannot be shipped in a package with other items and must ship in a package by itself.
*/
@property(nonatomic) NSNumber * isPackagedStandAlone;

/**
Indicates if the product in a cart, order, or wish list is purchased on a recurring schedule. If true, the item can be purchased or fulfilled at regular intervals, such as a monthly billing cycle. For example, digital or physical product subscriptions are recurring cart items. This property is not used at this time and is reserved for future functionality.
*/
@property(nonatomic) BOOL isRecurring;

/**
Indicates if the item is subject to taxation, used by products, options, extras, cart and order items, line items, and wish lists. If true, the entity is subject to tax based on the relevant tax rate and rules.
*/
@property(nonatomic) BOOL isTaxable;

/**
The manufacturer's part number for the product.
*/
@property(nonatomic) NSString * mfgPartNumber;

/**
The list of manufacturer part numbers defined for the product.
*/
@property(nonatomic) NSArray *mfgPartNumbers;

/**
Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
*/
@property(nonatomic) NSString * productCode;

/**
Integer that represents the sequential order of the product.
*/
@property(nonatomic) NSNumber * productSequence;

/**
The product type template associated with the product on the storefront.
*/
@property(nonatomic) NSString * productType;

/**
Mozu.ProductRuntime.Contracts.Product productTypeId ApiTypeMember DOCUMENT_HERE 
*/
@property(nonatomic) NSNumber * productTypeId;

/**
The usage type that applies to this product, which is Standard (a single product without configurable options), Configurable (a product that includes configurable option attributes), Bundle (a collection of products sold as a single entity), or Component (an invididual product that represents a component in a bundle).
*/
@property(nonatomic) NSString * productUsage;

/**
The current state of the document or product definition. States for documents include Active, Draft, or Latest. Active documents are published and cannot be deleted. Querying Latest returns the most recent version of the document, regardless of whether it is published or a draft. States for product include New, Draft, or Live.
*/
@property(nonatomic) NSString * publishState;

/**
The universal product code (UPC) is the barcode defined for the product. The UPC is unique across all sales channels. 
*/
@property(nonatomic) NSString * upc;

/**
The list of universal product codes defined for the product.
*/
@property(nonatomic) NSArray *upCs;

/**
Merchant-created code associated with a specific product variation. Variation product codes maintain an association with the base product code.
*/
@property(nonatomic) NSString * variationProductCode;

/**
List of shipping discounts that can be applied to the configured product. These discounts are calculated and updated as shoppers add content to their cart and continue checkout steps to order submission.
*/
@property(nonatomic) NSArray<MOZURuntimeDiscount> *availableShippingDiscounts;

/**
Properties of a collection of component products that make up a single product bundle with its own product code. Tenants can define product bundles for any product type that supports the Bundle product usage.
*/
@property(nonatomic) NSArray<MOZURuntimeBundledProduct> *bundledProducts;

/**
The list of all categories associated with the product. These categories contain products, can have discounts associated, and define the grouping of products to display on the storefront.
*/
@property(nonatomic) NSArray<MOZURuntimeCategory> *categories;

/**
Complex type that contains content for a language specified by LocaleCode.
*/
@property(nonatomic) MOZUProductContent *content;

/**
Properties and data of inventory information for configured and bundled products. If product stock is managed, the data specifies out of stock behavior.
*/
@property(nonatomic) MOZURuntimeProductInventoryInfo *inventoryInfo;

/**
Dimensions of the packaged product.
*/
@property(nonatomic) MOZURuntimePackageMeasurements *measurements;

/**
List of option attributes configured for an object. These values are associated and used by products, product bundles, and product types.
*/
@property(nonatomic) NSArray<MOZURuntimeProductOption> *options;

/**
Unit price that the tenant intends to sell the product if no sale price is set.
*/
@property(nonatomic) MOZURuntimeProductPrice *price;

/**
For products with options that vary the cost of the product, the range between lowest and highest possible price of the product based on the current selection of options.
*/
@property(nonatomic) MOZUProductPriceRange *priceRange;

/**
Properties that describe the behavior the system uses when determining the price of products.
*/
@property(nonatomic) MOZURuntimeProductPricingBehaviorInfo *pricingBehavior;

/**
Collection of property attributes defined for the object. Properties are associated to all objects within Mozu, including documents, products, and product types.
*/
@property(nonatomic) NSArray<MOZURuntimeProductProperty> *properties;

/**
The current state of the configured product determines whether or not the product is eligible for purchase. Products with options are only purchasable if the shopper has selected all required options. If the product is not ready for purchase, a message lists missing options that are required.
*/
@property(nonatomic) MOZUProductPurchasableState *purchasableState;

/**
A summary of all variations that exist for the product.
*/
@property(nonatomic) NSArray<MOZUVariationSummary> *variations;

@end

